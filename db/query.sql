Executing (default): DROP TABLE IF EXISTS "user_roles" CASCADE;
Executing (default): DROP TABLE IF EXISTS "transaction_details" CASCADE;
Executing (default): DROP TABLE IF EXISTS "transactions" CASCADE;
Executing (default): DROP TABLE IF EXISTS "product_variants" CASCADE;
Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
Executing (default): DROP TABLE IF EXISTS "product_categories" CASCADE;
Executing (default): DROP TABLE IF EXISTS "roles" CASCADE;
Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'roles' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'product_variants' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'product_categories' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'transactions' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'transaction_details' AND tc.table_catalog = 'productdb'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'user_roles' AND tc.table_catalog = 'productdb'
Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
Executing (default): DROP TABLE IF EXISTS "roles" CASCADE;
Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
Executing (default): DROP TABLE IF EXISTS "product_variants" CASCADE;
Executing (default): DROP TABLE IF EXISTS "product_categories" CASCADE;
Executing (default): DROP TABLE IF EXISTS "transactions" CASCADE;
Executing (default): DROP TABLE IF EXISTS "transaction_details" CASCADE;
Executing (default): DROP TABLE IF EXISTS "user_roles" CASCADE;
Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id"   SERIAL , "username" VARCHAR(255), "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "roles" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "roles" ("id" INTEGER , "name" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'roles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "product_categories" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "product_categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "active" BOOLEAN DEFAULT true, "created_user" VARCHAR(255), "created_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "updated_user" VARCHAR(255), "updated_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'product_categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "plu" VARCHAR(255) NOT NULL, "name" VARCHAR(255) NOT NULL, "product_category_id" INTEGER NOT NULL REFERENCES "product_categories" ("id"), "active" BOOLEAN DEFAULT true, "created_user" VARCHAR(255), "created_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "updated_user" VARCHAR(255), "updated_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "product_variants" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "product_variants" ("id"  SERIAL , "product_id" INTEGER NOT NULL REFERENCES "products" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "code" VARCHAR(255) NOT NULL, "name" VARCHAR(255) NOT NULL, "image_location" VARCHAR(255), "qty" INTEGER, "price" DECIMAL(10,2), "active" BOOLEAN DEFAULT true, "created_user" VARCHAR(255), "created_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "updated_user" VARCHAR(255), "updated_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'product_variants' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "transactions" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "transactions" ("id"  SERIAL , "transaction_no" VARCHAR(255) NOT NULL, "total_amount" DECIMAL(10,2), "active" BOOLEAN DEFAULT true, "created_user" VARCHAR(255), "created_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "updated_user" VARCHAR(255), "updated_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'transactions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "transaction_details" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "transaction_details" ("id"  SERIAL , "transaction_id" INTEGER NOT NULL REFERENCES "transactions" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "product_variant_id" INTEGER NOT NULL REFERENCES "product_variants" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "price" DECIMAL(10,2), "qty" INTEGER, "subtotal" DECIMAL(10,2), "active" BOOLEAN DEFAULT true, "created_user" VARCHAR(255), "created_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "updated_user" VARCHAR(255), "updated_date" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'transaction_details' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): DROP TABLE IF EXISTS "user_roles" CASCADE;
Executing (default): CREATE TABLE IF NOT EXISTS "user_roles" ("createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "roleId" INTEGER  REFERENCES "roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER  REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("roleId","userId"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_roles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): INSERT INTO "roles" ("id","name","createdAt","updatedAt") VALUES ($1,$2,$3,$4) RETURNING "id","name","createdAt","updatedAt";
Executing (default): INSERT INTO "roles" ("id","name","createdAt","updatedAt") VALUES ($1,$2,$3,$4) RETURNING "id","name","createdAt","updatedAt";
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "roles" WHERE "roles"."name" = 'customer';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "roles" WHERE "roles"."name" = 'administrator';
Executing (default): INSERT INTO "users" ("id","username","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","username","password","createdAt","updatedAt";
Executing (default): INSERT INTO "users" ("id","username","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","username","password","createdAt","updatedAt";
Executing (default): SELECT "createdAt", "updatedAt", "roleId", "userId" FROM "user_roles" AS "user_roles" WHERE "user_roles"."userId" = 1;
Executing (default): SELECT "createdAt", "updatedAt", "roleId", "userId" FROM "user_roles" AS "user_roles" WHERE "user_roles"."userId" = 2;
Executing (default): INSERT INTO "user_roles" ("createdAt","updatedAt","roleId","userId") VALUES ('2024-02-06 13:13:00.807 +00:00','2024-02-06 13:13:00.807 +00:00',2,1) RETURNING "createdAt","updatedAt","roleId","userId";
Executing (default): INSERT INTO "user_roles" ("createdAt","updatedAt","roleId","userId") VALUES ('2024-02-06 13:13:00.811 +00:00','2024-02-06 13:13:00.811 +00:00',1,2) RETURNING "createdAt","updatedAt","roleId","userId";
Executing (default): INSERT INTO "product_categories" ("id","name","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$4,$5) RETURNING "id","name","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "product_categories" ("id","name","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$4,$5) RETURNING "id","name","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "products" ("id","plu","name","product_category_id","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$6,$7) RETURNING "id","plu","name","product_category_id","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "products" ("id","plu","name","product_category_id","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$6,$7) RETURNING "id","plu","name","product_category_id","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "product_variants" ("id","product_id","code","name","qty","price","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$8,$9) RETURNING "id","product_id","code","name","image_location","qty","price","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "product_variants" ("id","product_id","code","name","qty","price","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$8,$9) RETURNING "id","product_id","code","name","image_location","qty","price","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "transactions" ("id","transaction_no","total_amount","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$5,$6) RETURNING "id","transaction_no","total_amount","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "transaction_details" ("id","transaction_id","product_variant_id","price","qty","subtotal","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$8,$9) RETURNING "id","transaction_id","product_variant_id","price","qty","subtotal","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "transactions" ("id","transaction_no","total_amount","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$5,$6) RETURNING "id","transaction_no","total_amount","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
Executing (default): INSERT INTO "transaction_details" ("id","transaction_id","product_variant_id","price","qty","subtotal","active","created_user","created_date","updated_date","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,$8,$9) RETURNING "id","transaction_id","product_variant_id","price","qty","subtotal","active","created_user","created_date","updated_user","updated_date","createdAt","updatedAt";
